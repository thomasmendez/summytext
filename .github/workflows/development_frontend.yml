name: Development.yml CI - Frontend

on:
  push:
    branches-ignore:
      - main

env:
  SUM_MY_TEXT_SERVICE: https://summytext.com/v1/predict
  AWS_BUCKET_NAME: summytext-dev
  AWS_BUCKET_NAME_STORYBOOK: summytext-dev-storybook

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16.x

      - name: Install Packages
        run: yarn install --immutable

      - name: Create .env
        run: |
          chmod +x "${GITHUB_WORKSPACE}/.github/env.sh"
          sh ${GITHUB_WORKSPACE}/.github/env.sh
        shell: bash

      - name: ESLint
        run: yarn lint

      - name: Prettier
        run: yarn pretty

      # - name: Test
      #   run: yarn test

      - name: Build App
        run: yarn run build

      - name: Build Storybook
        run: yarn build-storybook

      - name: Create dist Artifact
        uses: actions/upload-artifact@v2
        with:
          name: dist-dev
          path: frontend/dist/
          retention-days: 1

      - name: Create storybook-static Artifact
        uses: actions/upload-artifact@v2
        with:
          name: storybook-static-dev
          path: storybook-static/
          retention-days: 1

  configure-s3-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format - Existing Bucket
        id: fmt-remote
        run: terraform -chdir=terraform/development/remote fmt -check

      - name: Terraform Init - Existing Bucket
        id: init-remote
        run: terraform -chdir=terraform/development/remote init -backend-config="region=${{ secrets.AWS_REGION }}" -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Terraform Validate - Existing Bucket
        id: validate-remote
        run: terraform -chdir=terraform/development/remote validate -no-color

      - name: Terraform Plan - Existing Bucket
        id: plan-remote
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ secrets.AWS_REGION }}"
          terraform -chdir=terraform/development/remote plan -var="aws_bucket_name=${{ env.AWS_BUCKET_NAME }}" -no-color
        continue-on-error: true

      - name: Update Pull Request - Existing Bucket
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan-remote.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Format - Create Bucket
        id: fmt-create
        if: steps.plan-remote.outcome == 'failure'
        run: terraform -chdir=terraform/development/create fmt -check

      - name: Terraform Init - Create Bucket
        id: init-create
        if: steps.plan-remote.outcome == 'failure'
        run: terraform -chdir=terraform/development/create init -backend-config="region=${{ secrets.AWS_REGION }}" -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Terraform Validate - Create Bucket
        id: validate-create
        if: steps.plan-remote.outcome == 'failure'
        run: terraform -chdir=terraform/development/create validate -no-color

      - name: Terraform Plan - Create Bucket
        id: plan-create
        if: steps.plan-remote.outcome == 'failure'
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ secrets.AWS_REGION }}"
          terraform -chdir=terraform/development/create plan -var="aws_bucket_name=${{ env.AWS_BUCKET_NAME }}" -no-color
        continue-on-error: true

      - name: Update Pull Request - Create Bucket
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request' && steps.plan-remote.outcome == 'failure'
        env:
          PLAN: "terraform\n${{ steps.plan-create.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status - Existing Bucket && Create Bucket
        if: steps.plan-remote.outcome == 'failure' && steps.plan-create.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply - Existing Bucket
        id: apply-remote
        if: steps.plan-remote.outcome == 'success'
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ secrets.AWS_REGION }}"
          terraform -chdir=terraform/development/remote import -var="aws_bucket_name=${{ env.AWS_BUCKET_NAME }}" aws_s3_bucket.bucketdev ${{ env.AWS_BUCKET_NAME }}
          terraform -chdir=terraform/development/remote apply -var="aws_bucket_name=${{ env.AWS_BUCKET_NAME }}" -auto-approve

      - name: Terraform Apply - Create Bucket
        id: apply-create
        if: steps.plan-create.outcome == 'success'
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ secrets.AWS_REGION }}"
          terraform -chdir=terraform/development/create apply -var="aws_bucket_name=${{ env.AWS_BUCKET_NAME }}" -auto-approve

  sync-s3-dev:
    runs-on: ubuntu-latest
    needs: [build, configure-s3-dev]
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Retrieve dist files
        uses: actions/download-artifact@v2
        with:
          name: dist-dev
          path: frontend/dist/
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Deploy static site to S3 bucket
        run: aws s3 sync ./frontend/dist/ s3://${{ env.AWS_BUCKET_NAME }}

  configure-s3-dev-storybook:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format - Existing Bucket
        id: fmt-remote
        run: terraform -chdir=terraform/development/remote fmt -check

      - name: Terraform Init - Existing Bucket
        id: init-remote
        run: terraform -chdir=terraform/development/remote init -backend-config="region=${{ secrets.AWS_REGION }}" -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Terraform Validate - Existing Bucket
        id: validate-remote
        run: terraform -chdir=terraform/development/remote validate -no-color

      - name: Terraform Plan - Existing Bucket
        id: plan-remote
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ secrets.AWS_REGION }}"
          terraform -chdir=terraform/development/remote plan -var="aws_bucket_name=${{ env.AWS_BUCKET_NAME_STORYBOOK }}" -no-color
        continue-on-error: true

      - name: Update Pull Request - Existing Bucket
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan-remote.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Format - Create Bucket
        id: fmt-create
        if: steps.plan-remote.outcome == 'failure'
        run: terraform -chdir=terraform/development/create fmt -check

      - name: Terraform Init - Create Bucket
        id: init-create
        if: steps.plan-remote.outcome == 'failure'
        run: terraform -chdir=terraform/development/create init -backend-config="region=${{ secrets.AWS_REGION }}" -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Terraform Validate - Create Bucket
        id: validate-create
        if: steps.plan-remote.outcome == 'failure'
        run: terraform -chdir=terraform/development/create validate -no-color

      - name: Terraform Plan - Create Bucket
        id: plan-create
        if: steps.plan-remote.outcome == 'failure'
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ secrets.AWS_REGION }}"
          terraform -chdir=terraform/development/create plan -var="aws_bucket_name=${{ env.AWS_BUCKET_NAME_STORYBOOK }}" -no-color
        continue-on-error: true

      - name: Update Pull Request - Create Bucket
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request' && steps.plan-remote.outcome == 'failure'
        env:
          PLAN: "terraform\n${{ steps.plan-create.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status - Existing Bucket && Create Bucket
        if: steps.plan-remote.outcome == 'failure' && steps.plan-create.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply - Existing Bucket
        id: apply-remote
        if: steps.plan-remote.outcome == 'success'
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ secrets.AWS_REGION }}"
          terraform -chdir=terraform/development/remote import -var="aws_bucket_name=${{ env.AWS_BUCKET_NAME_STORYBOOK }}" aws_s3_bucket.bucketdev ${{ env.AWS_BUCKET_NAME_STORYBOOK }}
          terraform -chdir=terraform/development/remote apply -var="aws_bucket_name=${{ env.AWS_BUCKET_NAME_STORYBOOK }}" -auto-approve

      - name: Terraform Apply - Create Bucket
        id: apply-create
        if: steps.plan-create.outcome == 'success'
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ secrets.AWS_REGION }}"
          terraform -chdir=terraform/development/create apply -var="aws_bucket_name=${{ env.AWS_BUCKET_NAME_STORYBOOK }}" -auto-approve

  sync-s3-dev-storybook:
    runs-on: ubuntu-latest
    needs: [build, configure-s3-dev-storybook]
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Retrieve storybook-static files
        uses: actions/download-artifact@v2
        with:
          name: storybook-static-dev
          path: storybook-static/
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Deploy static storybook site to S3 bucket
        run: aws s3 sync ./storybook-static/ s3://${{ env.AWS_BUCKET_NAME_STORYBOOK }}
